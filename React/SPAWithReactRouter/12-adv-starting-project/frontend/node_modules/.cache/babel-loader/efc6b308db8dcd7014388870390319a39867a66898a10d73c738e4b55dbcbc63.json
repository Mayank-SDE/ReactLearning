{"ast":null,"code":"var _jsxFileName = \"/Users/mayankchoudhary/Desktop/Academind/React/SPAWithReactRouter/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Events, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = Events;\nexport async function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch teh events.\" }\n    // throw new Response(JSON.stringify({ message: 'could not fetch events' }), { status: 500 });\n\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  defer({\n    events: loadEvents\n  });\n}\nexport default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","Events","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvents","response","fetch","ok","status","loader","$RefreshReg$"],"sources":["/Users/mayankchoudhary/Desktop/Academind/React/SPAWithReactRouter/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction Events() {\n\n  const data = useLoaderData();\n\n  if (data.isError) {\n    return <p>{data.message}</p>;\n  }\n  const events = data.events;\n\n  return (\n    <>\n\n      <EventsList events={events} />\n    </>\n  );\n}\n\nexport async function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n\n    // return { isError: true, message: \"Could not fetch teh events.\" }\n    // throw new Response(JSON.stringify({ message: 'could not fetch events' }), { status: 500 });\n\n    throw json({ message: \"Could not fetch events.\" }, { status: 500 });\n  } else {\n    return response;\n\n  }\n}\n\nexport function loader() {\n\n  defer({\n    events: loadEvents\n  });\n\n}\n\nexport default Events;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAE7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAEhB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAE5B,IAAIU,IAAI,CAACC,OAAO,EAAE;IAChB,oBAAON,OAAA;MAAAO,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAE1B,oBACEb,OAAA,CAAAE,SAAA;IAAAK,QAAA,eAEEP,OAAA,CAACF,UAAU;MAACe,MAAM,EAAEA;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACR,EAAA,CAfQD,MAAM;EAAA,QAEAR,aAAa;AAAA;AAAAmB,EAAA,GAFnBX,MAAM;AAiBf,OAAO,eAAeY,UAAUA,CAAA,EAAG;EACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAEhB;IACA;;IAEA,MAAMtB,IAAI,CAAC;MAAEY,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEW,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOH,QAAQ;EAEjB;AACF;AAEA,OAAO,SAASI,MAAMA,CAAA,EAAG;EAEvBvB,KAAK,CAAC;IACJgB,MAAM,EAAEE;EACV,CAAC,CAAC;AAEJ;AAEA,eAAeZ,MAAM;AAAC,IAAAW,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}