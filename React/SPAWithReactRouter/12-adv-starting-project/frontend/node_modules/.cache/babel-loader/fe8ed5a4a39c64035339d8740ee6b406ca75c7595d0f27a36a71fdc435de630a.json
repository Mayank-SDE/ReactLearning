{"ast":null,"code":"var _jsxFileName = \"/Users/mayankchoudhary/Desktop/Academind/React/SPAWithReactRouter/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => {\n        return /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 18\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Events, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = Events;\nexport async function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch teh events.\" }\n    // throw new Response(JSON.stringify({ message: 'could not fetch events' }), { status: 500 });\n\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nexport default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","Events","_s","events","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/mayankchoudhary/Desktop/Academind/React/SPAWithReactRouter/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction Events() {\n\n  const { events } = useLoaderData();\n\n  return (\n    <>\n      <Await resolve={events}>\n        {(loadedEvents) => {\n          return <EventsList events={loadedEvents} />\n        }}\n      </Await>\n    </>\n  );\n}\n\nexport async function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n\n    // return { isError: true, message: \"Could not fetch teh events.\" }\n    // throw new Response(JSON.stringify({ message: 'could not fetch events' }), { status: 500 });\n\n    throw json({ message: \"Could not fetch events.\" }, { status: 500 });\n  } else {\n    return response;\n\n  }\n}\n\nexport function loader() {\n\n  return defer({\n    events: loadEvents()\n  });\n\n}\n\nexport default Events;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAEhB,MAAM;IAAEC;EAAO,CAAC,GAAGX,aAAa,CAAC,CAAC;EAElC,oBACEM,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACEN,OAAA,CAACH,KAAK;MAACU,OAAO,EAAEF,MAAO;MAAAC,QAAA,EACnBE,YAAY,IAAK;QACjB,oBAAOR,OAAA,CAACF,UAAU;UAACO,MAAM,EAAEG;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC7C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC,gBACR,CAAC;AAEP;AAACR,EAAA,CAbQD,MAAM;EAAA,QAEMT,aAAa;AAAA;AAAAmB,EAAA,GAFzBV,MAAM;AAef,OAAO,eAAeW,UAAUA,CAAA,EAAG;EACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAEhB;IACA;;IAEA,MAAMtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EAEjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EAEvB,OAAOxB,KAAK,CAAC;IACXS,MAAM,EAAES,UAAU,CAAC;EACrB,CAAC,CAAC;AAEJ;AAEA,eAAeX,MAAM;AAAC,IAAAU,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}